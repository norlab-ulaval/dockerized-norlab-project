# ====DN Project template==========================================================================
#
# ....Repository config............................................................................
# https://github.com/norlab-ulaval/RedLeader-research-codebase.git
DN_PROJECT_GIT_DOMAIN="norlab-ulaval"
#DN_PROJECT_GIT_NAME="RedLeader-research-codebase"
DN_PROJECT_GIT_NAME="dockerized-norlab-project-mock"
#DN_PROJECT_GIT_REMOTE_URL="$( git remote get-url origin )"
#DN_PROJECT_GIT_NAME="${DN_PROJECT_GIT_NAME:-$( basename ${DN_PROJECT_GIT_REMOTE_URL} .git )}"
#DN_PROJECT_GIT_DOMAIN="${DN_PROJECT_GIT_DOMAIN:-$( basename $( dirname ${DN_PROJECT_GIT_REMOTE_URL} ) )}"
#
# ....Docker config................................................................................
DN_PROJECT_HUB=norlabulaval
DN_PROJECT_BASE_IMG=dockerized-norlab-dependencies-full # DN-project Default
#DN_PROJECT_BASE_IMG=dockerized-norlab-control-deep-rl-f1tenth
DN_PROJECT_IMAGE_NAME=$( echo "${DN_PROJECT_GIT_NAME}" | tr '[:upper:]' '[:lower:]' )
DN_CONTAINER_NAME="IamDNPuser-mock"
DN_PROJECT_ALIAS_PREFIX="umock"
#
# ....DN Project-deploy config.....................................................................
#
# Path to the src code that will be cloned into the DN project-deploy image
DN_PROJECT_DEPLOY_SRC_PATH="$( git rev-parse --show-toplevel )"
#
# Branch checkout for the project-deploy image
DN_PROJECT_DEPLOY_REPO_BRANCH=dev
# Option: main, dev, <feature-branch> or tag version (ie v*.*.*)
#
# ....Container user (fetched from host machine at runtime)........................................
DN_PROJECT_USER="$( id -un )"
DN_PROJECT_UID="$( id -u )"
DN_PROJECT_GID="$( id -g )"
#
# ....Temp dockerized-norlab logic.................................................................
# Note: Quick-hack for manualy do 'dn_execute_compose_over_build_matrix.bash'
# (NICE TO HAVE) ToDo: refactor using dockerized-norlab-project when ready
#
#TAG_VERSION=r35.2.1
#TAG_VERSION=r35.3.1
TAG_VERSION=r35.4.1
#TAG_VERSION=r35.5.0 # Note: dustynv/l4t-pytorch is not available for this JP version yet
#TAG_VERSION=r36.2.0
#
#DOCKERIZED_NORLAB_VERSION=v0.7.0
DOCKERIZED_NORLAB_VERSION=bleeding
TAG_PACKAGE=foxy-base-l4t-pytorch
#
# ====Dockerized-NorLab============================================================================
#
DN_HUB=norlabulaval
DN_GIT_BRANCH=dev
#
DEPENDENCIES_BASE_IMAGE_TAG="${TAG_PACKAGE:?err}-${TAG_VERSION:?err}"
DN_IMAGE_TAG="DN-${DOCKERIZED_NORLAB_VERSION:?err}-${DEPENDENCIES_BASE_IMAGE_TAG:?err}"
TARGET_OS_NAME=l4t
PROJECT_TAG="${TARGET_OS_NAME:?err}-${TAG_VERSION:?err}"
#
# ====NorLab Robot=================================================================================
#
DN_DDS_NETWORK_INTERFACE=eth0
#
# ====Docker=======================================================================================
# Note:
#   - `COMPOSE_PROJECT_NAME` set the project name for docker compose usage
#   - `docker compose` seams to resolve env var with command in .env after executing the
#     `COMPOSE_PROJECT_NAME` related logic. In other word, `COMPOSE_PROJECT_NAME` can only be
#     hardcoded or substituted in .env file.
COMPOSE_PROJECT_NAME=$( echo "${DN_PROJECT_GIT_NAME}" | tr '[:upper:]' '[:lower:]' )
#
## Docker context global overide
#DOCKER_CONTEXT=jetson-nx-redleader-daemon
## Docker builder global overide.
#BUILDX_BUILDER=desktop-linux
## Note: execute_compose.bash automaticaly select the native builder if BUILDX_BUILDER is empty.
#
## Unmute BUILDKIT_PROGRESS to set globaly for debugging dockerfile
## For debuging docker build localy, use `docker build --progress=plain --no-cache` flags instead
#BUILDKIT_PROGRESS=plain
#
## Note: Buildkit is now enable by default on Docker Desktop
#COMPOSE_DOCKER_CLI_BUILD=1
#DOCKER_BUILDKIT=1
#
# ....Set runtime environment variable.............................................................
HYDRA_FULL_ERROR=1
PYTHONUNBUFFERED=1
HYDRA_FULL_ERROR=1
PYCHARM_DEBUG=1
#PYTEST_DEBUG=1
#
# OC_CAUSE: Set omegaconf full error backtrace
OC_CAUSE=1
#
