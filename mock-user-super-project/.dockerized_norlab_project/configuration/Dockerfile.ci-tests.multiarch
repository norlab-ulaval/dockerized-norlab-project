# ====Dockerfile.ci-tests.multiarch================================================================
#
# Test container for executing Dockerized-NorLab-project user tests on x86 and arm64 architecture.
#
# Usage:
#   Execute `build.ci_tests.multiarch.bash` to build test image with required dependent image(s).
#
# Notes:
#   - Tests are executed at build time on both architecture.
#   - During the `execute-ci-tests` stage, all `run_ci_tests.*.bash` files, located in
#      `.dockerized_norlab_project/configuration/project_cicd/` are execute one by one.
#
# =================================================================================================
ARG BASE_IMAGE
ARG BASE_IMAGE_TAG
FROM ${BASE_IMAGE:?err}:${BASE_IMAGE_TAG:?err} AS norlab-teamcity-cicd-setup

ARG IS_TEAMCITY_RUN
ENV IS_TEAMCITY_RUN=${IS_TEAMCITY_RUN:-false}

SHELL ["/bin/bash", "-c"]
ARG DEBIAN_FRONTEND=noninteractive

RUN echo "Pre-condition checks" && { \
        test $(whoami) == "root" &&  \
        test -n ${DN_PROJECT_USER:?'Env variable need to be set and non-empty.'} && \
        test -d /home/${DN_PROJECT_USER} && \
        test -n ${DN_PROJECT_GIT_NAME:?'Env variable need to be set and non-empty.'} && \
        test -n ${DN_PROJECT_GIT_DOMAIN:?'Env variable need to be set and non-empty.'} ; \
    } || exit 1

# ===install teamcity & CI/CD utilities============================================================

RUN pip3 install --no-cache-dir  --upgrade pip
RUN pip3 install --no-cache-dir teamcity-messages

RUN ( \
  echo "Configure Matplotlib to use a non-interactive backends for TeamCity run"; \
  echo "backend : Agg" >> /etc/matplotlibrc; \
)

WORKDIR /project_cicd
COPY --chown=${DN_PROJECT_USER} .dockerized_norlab_project/configuration/project_cicd .
RUN chmod +x ./dn_entrypoint.ci_test.bash

# ====Execute tests================================================================================
# (CRITICAL) ToDo: validate multiplatform setup
FROM norlab-teamcity-cicd-setup AS execute-ci-tests
ARG TARGETPLATFORM
ARG TARGETARCH
ARG BUILDPLATFORM

USER ${DN_PROJECT_USER:?err}
SHELL ["/bin/bash", "-c"]
ARG DEBIAN_FRONTEND=noninteractive
ENV DNP_PYTEST_CI_RUN=true

WORKDIR ${DN_PROJECT_PATH:?'environment variable is not set'}
COPY --chown=${DN_PROJECT_USER} ../../ ${DN_PROJECT_PATH:?err}/

# Note: Run tests in docker build stage to assess multi-architecture related potential problem.
WORKDIR /project_cicd
RUN ./dn_entrypoint.ci_test.bash

ENTRYPOINT [ ]
