#!/bin/bash
# bin/dnp

DOCUMENTATION_BUFFER_DNP=$( cat <<'EOF'
# =================================================================================================
#                                  Dockerized-NorLab-Project (DNP)
#                         A tool for managing Docker-based robotic projects
#
# What it does:
#   • Provide a dockerized environment for [Local|remote] development, deployment, CI-testings and runing slurm jobs
#   • Support l4t/arm64 (jetson), darwin/arm64 (Mac OsX) and linux/x86 os and architecture
#   • Support nvidia GPU through nvidia-docker on both l4t/arm64 and linux/x86
#
# Usage:
#   $ dnp COMMAND [OPTIONS]
#
# Commands:
#   init        Initialize a new DNP project
#   build       Build Docker images
#   up          Start containers
#   down        Stop containers
#   run         Run a command in a container
#   config      Show configuration
#   version     Show DNP version
#   project     Super project commands
#   help        Show this help message
#
# Run 'dnp COMMAND --help' for more information on a command.
#
# =================================================================================================
EOF
)


# ....Source project shell-scripts dependencies..................................................
script_path="$(realpath "${BASH_SOURCE[0]:-'.'}")"
dnp_core="$(dirname "$(dirname "${script_path}")")/lib/core"
source "${dnp_core}/utils/import_dnp_lib.bash"

# (CRITICAL) ToDo: validate deleting this line ↓
#source "${dnp_core}/utils/execute_compose.bash" || exit 1


function dnp::entrypoint() {
  # ....Pre-condition..............................................................................
  local dnp_error_prefix="\033[1;31m[DNP error]\033[0m"
  test -d "${DNP_ROOT:?err}" || { echo -e "${dnp_error_prefix} librairy load error!" ; exit 1 ; }
  test -d "${DNP_LIB_PATH:?err}" || { echo -e "${dnp_error_prefix} librairy load error!" ; exit 1 ; }
#  n2st::print_msg "test" 2>/dev/null >/dev/null || { echo -e "${dnp_error_prefix} The N2ST lib is not loaded!" ; exit 1 ; }

  # ....Set env variables (pre cli)................................................................
  # Parse command
  local the_command="$1"
  shift || true

  # ....cli........................................................................................
  if [[ -z ${the_command}  ]]; then
    dnp::show_entrypoint_help
  fi

  case "${the_command}" in
      init)
          source "${DNP_LIB_PATH}/commands/init.bash" || exit 1
          dnp::init_command "$@"
          ;;
      build)
          source "${DNP_LIB_PATH}/commands/build.bash" || exit 1
          dnp::build_command "$@"
          ;;
      up)
          source "${DNP_LIB_PATH}/commands/up.bash" || exit 1
          dnp::up_command "$@"
          ;;
      down)
          source "${DNP_LIB_PATH}/commands/down.bash" || exit 1
          dnp::down_command "$@"
          ;;
      run)
          source "${DNP_LIB_PATH}/commands/run.bash" || exit 1
          dnp::run_command "$@"
          ;;
      config)
          source "${DNP_LIB_PATH}/commands/config.bash" || exit 1
          dnp::config_command "$@"
          ;;
      version)
          source "${DNP_LIB_PATH}/commands/version.bash" || exit 1
          dnp::version_command "$@"
          ;;
      project)
          sub_the_command="$1"
          shift || true

          source "${DNP_LIB_PATH}/commands/project.bash" || exit 1
          if [[ -z ${sub_the_command}  ]]; then
            dnp::command_help_menu "${DOCUMENTATION_BUFFER_PROJECT:?err}"
          fi

          case "${sub_the_command}" in
              validate)
                  dnp::project_validate_command "$@"
                  ;;
              sanity)
                  dnp::project_sanity_command "$@"
                  ;;
              dotenv)
                  dnp::project_dotenv_command "$@"
                  ;;
              help|--help|-h)
                  dnp::command_help_menu "${DOCUMENTATION_BUFFER_PROJECT:?err}"
                  ;;
              *)
                  dnp::unknown_subcommand_msg "project" "${sub_the_command}"
                  ;;
          esac
          ;;
      help|--help|-h)
          dnp::show_entrypoint_help
          ;;
      *)
          dnp::unknown_command_msg "${the_command}"
          ;;
  esac
}

function dnp::show_entrypoint_help() {
    # Splash type: small, negative or big
    n2st::norlab_splash 'Dockerized-NorLab-Project' 'https://github.com/norlab-ulaval/dockerized-norlab-project.git' 'negative'
    n2st::echo_centering_str 'A tool for managing Docker-based robotic projects' "\033[1;37m" " "

    # Note:
    #   - Strip shell comment bloc comment character `#` of both empty line and line with text,
    #   - Delete both horizontal lines
    #   - Delet both header ligne
    echo -e "${DOCUMENTATION_BUFFER_DNP}" | sed '/\# ====.*/d' | sed 's/^\# //' | sed 's/^\#//' | sed '/Dockerized-NorLab-Project (DNP)/d' | sed '/A tool for managing Docker-based robotic projects/d' | sed "/Run 'dnp COMMAND --help' for more information on a command./d"
    echo -e "Run ${MSG_DIMMED_FORMAT}dnp COMMAND --help${MSG_END_FORMAT} for more information on a command."
    exit 0
}

function dnp::show_entrypoint_help_no_splash() {
    # Note:
    #   - Strip shell comment bloc comment character `#` of both empty line and line with text,
    #   - Delete both horizontal lines
    #   - Reformat the header left align
    echo -e "${DOCUMENTATION_BUFFER_DNP}" | sed '/\# ====.*/d' | sed 's/^\# //' | sed 's/^\#//' | sed 's/^[[:space:]]*Dockerized-NorLab-Project (DNP)/Dockerized-NorLab-Project (DNP)/' | sed 's/^[[:space:]]*A tool for managing Docker-based robotic projects/A tool for managing Docker-based robotic projects/'
    exit 0
}

# ::::Main:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
dnp::entrypoint "$@" || exit 1
